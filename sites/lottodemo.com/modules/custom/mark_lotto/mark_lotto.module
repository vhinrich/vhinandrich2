<?php

/**
* Implements hook_permission().
*/
function mark_lotto_permission() {
  return array(
    'administer mark lotto settings' => array(
      'title' => t('Administer Mark Lotto Settings'),
    ),
  );
}

/**
* Implements hook__menu().
*/
function mark_lotto_menu(){
  $items['admin/structure/mark-termform'] = array(
    'page callback' => 'drupal_get_form',
    'title' => t('Mark Lotto Settings'),
    'page arguments' => array('_mark_lotto_settings'),
    'access arguments' => array('administer mark lotto settings')
  );
  $items['mark-termform/random-numbers-json'] = array(
    'page callback' => '_mark_lotto_random_numbers_json',
    'title' => t('Mark Lotto Settings'),
    'access arguments' => array('access content'),
  );
  
  return $items;
}

function _mark_lotto_random_numbers_json(){
  $numbers = _mark_lotto_draw_numbers();
  echo drupal_json_encode($numbers);
}

function _mark_lotto_settings(){
  $form = null;
  
  $form['mark_lotto_cutoff'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bet Cutoff'),
  );
  $form['mark_lotto_cutoff']['mark_lotto_cutoff_start'] = array(
    '#type' => 'textfield',
    '#title' => t('Start time'),
    '#description' => t('Format: hh:mm'),
    '#default_value' => variable_get('mark_lotto_cutoff_start', null)
  );
  $form['mark_lotto_cutoff']['mark_lotto_cutoff_end'] = array(
    '#type' => 'textfield',
    '#title' => t('End time'),
    '#description' => t('Format: hh:mm'),
    '#default_value' => variable_get('mark_lotto_cutoff_end', null)
  );
  
  $form['mark_lotto_draw_time'] = array(
    '#type' => 'textfield',
    '#title' => t('Draw time'),
    '#description' => t('Format: hh:mm'),
    '#default_value' => variable_get('mark_lotto_draw_time', null)
  );
  
  $form['mark_lotto_manual_draw'] = array(
    '#type' => 'button',
    '#title' => t('Draw Winner'),
    '#executes_submit_callback' => TRUE,
    '#submit' => array('_mark_lotto_draw_winner'),
    '#value' => t('Draw Winners'),
  );
  
  return system_settings_form($form);
}

function mark_lotto_form_alter(&$form, &$form_state, $form_id){
  if($form_id=='bet_node_form'){
    $cutoff_start = variable_get('mark_lotto_cutoff_start', null);
    $cutoff_end = variable_get('mark_lotto_cutoff_end', null);
    
    $cutoff_start = strtotime('now ' . $cutoff_start);
    $cutoff_end = strtotime('now ' . $cutoff_end);
    
    if($cutoff_start > strtotime('now') || $cutoff_end < strtotime('now')){
      unset($form['title']);
      unset($form['field_bettor']);
      unset($form['field_date']);
      unset($form['field_number_pool']);
      $form['mymarkup'] = array(
        '#type' => 'markup',
        '#markup' => t('Betting system is turned off. Betting time is from ' . date('h:i A', $cutoff_start) . ' to ' . date('h:i A', $cutoff_end))
      );
    }
    
    if(!isset($form['#node']->nid)){
      $form['field_bet_id'][LANGUAGE_NONE][0]['value']['#default_value'] = strtotime('now');
      
      $form['field_number_pool'][LANGUAGE_NONE][0]['random_numbers'] = array(
        '#type' => 'button',
        '#value' => t('Lucky pick'),
        '#weight' => 2,
        '#prefix' => '<div id="random-button">',
        '#suffix' => '</div>',
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'mark_lotto') . '/js/random-number.js',
          ),
        ),
      );
    }
    
    
    $form['#validate'][] = '_mark_lotto_form_validate_numbers';
  }
}

function mark_lotto_cron(){
  $draw_time = variable_get('mark_lotto_draw_time', null);
  $draw_time = strtotime('now' . $draw_time);
  if(strtotime('now') >= $draw_time && strtotime('now') <= ($draw_time + 3600)){
    _mark_lotto_draw();
  }
}

function _mark_lotto_form_validate_numbers($form, $form_state){
    switch($form_state['triggering_element']['#value']){
      case 'Delete':
        break;
      default:
        $form_numbers = array();
        foreach($form_state['values']['field_number_pool'][LANGUAGE_NONE][0]['field_number'][LANGUAGE_NONE] as $key => $number){
          if(in_array($number['value'], $form_numbers)){
            form_error($form, t('Duplicate number in number pool is not allowed'));
            break;
          }
          $form_numbers[] = $number['value'];
        }
        break;
    }
}

function _mark_lotto_draw_winner(){
  _mark_lotto_draw();
}

function _mark_lotto_draw(){
  $cutoff_start = variable_get('mark_lotto_cutoff_start', null);
  $cutoff_end = variable_get('mark_lotto_cutoff_end', null);
  
  $cutoff_start = strtotime('now ' . $cutoff_start);
  $cutoff_end = strtotime('now ' . $cutoff_end);
  
  $numbers = _mark_lotto_draw_numbers(); //get random numbers
  $nodes = _get_possible_nodes($numbers, $cutoff_start, $cutoff_end); //get possible winners means the numbers drawn are present in their bets
  $winner_nodes = _get_real_winner_nodes($nodes,$numbers); //get the winner nodes from the array nodes of possible winners
  
  $draw_items = array(
    'numbers' => $numbers,
    'possible_winners' => $nodes,
    'winners' => $winner_nodes,
  );
  
  _mark_lotto_create_winner_node($draw_items);
}

function _mark_lotto_draw_numbers(){
  $max_num_pool = 6; //maximum in the number pool
  $max_num = 42; //maximum value allowed
  $numbers = array();
  for($i=1;$i<=$max_num_pool;$i++){
    $rndNum = rand(1, $max_num); //get random number
    while(in_array($rndNum, $numbers)){
      $rndNum = rand(1, $max_num); //get random number if the number is already in array
    }
    $numbers[] = $rndNum; //put the drawn number in array
  }
  return $numbers;
}

function _get_possible_nodes($numbers, $start_time, $end_time){
  $query = db_select('field_data_field_number', 'n');
  $query->join('field_data_field_number_pool', 'p', 'n.entity_id=p.field_number_pool_value');
  $query->join('node', 'd', 'p.entity_id=d.nid');
  $query->fields('p', array('entity_id'))
  ->distinct()
  ->condition('n.field_number_value', $numbers, 'IN')
  ->condition('created', array($start_time, $end_time), 'BETWEEN');
  $result = $query->execute();
  $nodes = array();
  while($record = $result->fetchAssoc()) {
    $nodes[] = node_load($record['entity_id']);
  }
  return $nodes;
}

function _get_real_winner_nodes($nodes, $numbers){
  $winners = array();
  foreach($nodes as $key => $node){
    $numbersCol = field_collection_item_load($node->field_number_pool[LANGUAGE_NONE][0]['value']);
    $numbersCol = $numbersCol->field_number[LANGUAGE_NONE];
    $allExists = true; //assume all exists
    foreach($numbersCol as $key => $number){
      if(in_array($number['value'], $numbers)){
        
      }else{
        $allExists = false;
        break;
      }
    }
    if($allExists){
      $winners[] = $node;
    }
  }
  return $winners;
}

function _mark_lotto_create_winner_node($draw_items){
  $node = new stdClass();
  $node->type = 'winner';
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->status = 1;
  $node->uid = 1;
  $node->title = t('Winners for ' . strtotime('now'));
  $node->created = strtotime('now');
  foreach($draw_items['winners'] as $key => $winner){
    $node->field_bet[LANGUAGE_NONE][]['nid'] = $winner->nid;
  }
  node_save($node);
  
  // Create and save field collection for node
  $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_number_pool'));
  $field_collection_item->setHostEntity('node', $node);
  foreach($draw_items['numbers'] as $key => $number){
    $field_collection_item->field_number[LANGUAGE_NONE][]['value'] = $number;
  }
  $field_collection_item->save();
  
}