<?php

/**
 * Implements of hook_permission().
 */
function onix_facebook_permission() {
  return array(
    'administer facebook comments' => array(
      'title' => t('Administer Facebook Comments'),
    ),
    'moderate facebook comments' => array(
      'title' => t('Enable/disable Facebook comments per node'),
    ),
    'enabled facebook comments' => array(
        'title' => t('Enable Facebook comments everywhere'),
    ),
  );
}

/**
 * Implements of hook_menu().
 */
function onix_facebook_menu() {
  $items = array();
  $items['admin/content/facebook'] = array(
    'title' => 'Facebook settings',
    'description' => 'Configure Facebook comments settings like the Facebook App ID.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onix_facebook_admin'),
    'access arguments' => array('administer facebook comments'),
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function onix_facebook_block_info() {
  $blocks = array();
  $blocks['onix-facebook-comments'] = array(
    'info' => t('Facebook comments'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function onix_facebook_block_view($delta = '') {
  $block = array();
  if ($delta == 'onix-facebook-comments') {
    $width = variable_get('onix_facebook_block_width', 208);
    $amount = variable_get('onix_facebook_block_amount', 15);
    $block = array(
      'subject' => t('Facebook comments'),
      'content' => onix_facebook_display_comments($width, $amount),
    );
  }
  return $block;
}

/**
 * Configure facebook comments settings like the facebook App ID.
 *
 * @see onix_facebook_admin_applyall()
 */
function onix_facebook_admin() {
  $form = array();
  $form['onix_facebook_appid'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook App ID'),
    '#default_value' => variable_get('onix_facebook_appid', ''),
    '#description' => t('Enter the Facebook App ID to ensure that all comments can be grouped for moderation.'),
  );

  $form['onix_facebook_enableall'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable facebook comments around the site.'),
      '#default_value' => variable_get('onix_facebook_enableall', TRUE),
  );

  $form['onix_facebook_style'] = array(
    '#type' => 'select',
    '#title' => t('Color Scheme'),
    '#default_value' => variable_get('onix_facebook_style', 'light'),
    '#options' => array('light' => t('Light'), 'dark' => t('Dark')),
  );
  $form['onix_facebook_viewmode'] = array(
    '#type' => 'select',
    '#title' => t('View mode'),
    '#default_value' => variable_get('onix_facebook_viewmode', 'full'),
    '#options' => array('both' => t('Both full node and teaser'), 'full' => t('Full node'), 'teaser' => t('Teaser')),
  );
  $form['onix_facebook_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook comment plugin width (nodes)'),
    '#default_value' => variable_get('onix_facebook_width', 620),
    '#description' => t('The width of the Facebook comment plugin for nodes, in pixels. Example: 620'),
  );
  $form['onix_facebook_block_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook comment block plugin width (block)'),
    '#default_value' => variable_get('onix_facebook_block_width', 208),
    '#description' => t('The width of the Facebook comment plugin for the block, in pixels. Example: 250'),
  );
  $form['onix_facebook_block_amount'] = array(
    '#type' => 'select',
    '#title' => t('Amount of comments to display (block)'),
    '#options' => array(1 => 1, 2 => 2, 3 => 3, 5 => 5, 7 => 7, 10 => 10, 15 => 15, 20 => 20, 30 => 30),
    '#default_value' => variable_get('onix_facebook_block_amount', 15),
  );

  $defaulttypes = array();
  $types = node_type_get_types();
  foreach ($types as $key => $type) {
    $defaulttypes[$key] = $type->name;
  }
  $form['onix_facebook_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Facebook comment default content types'),
    '#options' => $defaulttypes,
    '#default_value' => variable_get('onix_facebook_types', array()),
    '#description' => t('Check the content types that should have facebook comments enabled by default.'),
  );
  $form['onix_facebook_applyall'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable facebook comments on existing content for the selected content types.'),
    '#default_value' => FALSE,
  );
  $form['#submit'][] = 'onix_facebook_admin_applyall_batch';
  return system_settings_form($form);
}

/**
 * Form submission handler for onix_facebook_admin().
 *
 * @see onix_facebook_admin()
 */
function onix_facebook_admin_applyall_batch(&$form, $form_state) {
  if ($form_state['values']['onix_facebook_applyall']) {
       $types = array();
    foreach ($form_state['values']['onix_facebook_types'] as $key => $value) {
      if (!empty($value)) $types[] = $key;
    }
    $total =  db_query('SELECT COUNT(*) AS total FROM {node} WHERE type IN (:types)', array(":types"=>$types))->fetchField();


    $batch = array(
    'operations' => array(
      array('onix_facebook_batch_process', array($total, $types)),
      ),
    'finished' => 'onix_facebook_batch_finished',
    'title' => t('Procesando tabla de nodos'),
    'init_message' => t('Iniciando creación de tabla de nodos.'),
    'progress_message' => t('Procesando Nodos.'),
    'error_message' => t('El proceso de creación de la tabla ha sufrido un error.'),
  );

  batch_set($batch);
  batch_process("admin/content/facebook");

  }
}

function onix_facebook_batch_process($total,$types,  &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $total;
  }

  $limit = 5;
  $results = db_query_range("SELECT nid FROM {node} 
                            WHERE type  IN (:types) 
                            ORDER BY nid DESC", 
            $context['sandbox']['progress'],
            $limit,
            array(':types'=>$types));

  while($nid = $results->fetchField()) {
        db_merge('onix_facebook')
        ->key(array('nid' => $nid))
        ->fields(array('enabled' => 1))
        ->execute();
    $context['sandbox']['progress']++;
    $context['message'] = t('Now processing %nid', array('%nid' => $nid));
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function onix_facebook_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = "Se habilitaron los comentarios";
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }
}

/**
 * Implements hook_form_alter().
 *
 * Add the facebook commenting options for a node.
 */
function onix_facebook_form_node_form_alter(&$form, $form_state) {

  // Check if the user has permission to enabled and disable facebook comments for this node
  if (!user_access('moderate facebook comments')) return;
  // Load the default values
  $node = $form['#node'];
  // If this is a preview then get the values from the form, not the db
  if (isset($form_state['values']['op']) && $form_state['values']['op'] == t('Preview')) {
    $defaults = new StdClass;
    $defaults->enabled = $form_state['values']['onix_facebook_enabled'];
    $defaults->amount = $form_state['values']['onix_facebook_amount'];
  }
  elseif (isset($node->nid) && $node->nid > 0) {
    // Load the values from the db if we are viewing an existing node.
    $defaults = db_select('onix_facebook', 'f')
      ->fields('f', array('enabled', 'amount'))
      ->condition('f.nid', $node->nid, '=')
      ->execute()
      ->fetchObject();
    // If the node is existed before we installed facebook add default values.
    if (!$defaults) {
      $defaulttypes = variable_get('onix_facebook_types', array());
      $defaults = new StdClass;
      $defaults->enabled =  !empty($defaulttypes[$node->type]) ? 1 : 0;;
      $defaults->amount = 15;
    }
  }
  else {
    // Init standard values
    $defaulttypes = variable_get('onix_facebook_types', array());
    $defaults = new StdClass;
    $defaults->enabled = !empty($defaulttypes[$node->type]) ? 1 : 0;
    $defaults->amount = 15;
  }
  $form['onix_facebook'] = array(
    '#type' => 'fieldset',
    '#title' => t('Facebook comments'),
    '#group' => 'additional_settings',
    '#attributes' => array('class' => array('edit-onix-facebook-comments')),
    '#attached' => array(
      'js' => array('vertical-tabs' => drupal_get_path('module', 'onix_facebook') . "/js/onix_facebook_vertical_tabs.js"),
    ),
  );
  $form['onix_facebook']['onix_facebook_description'] = array(
    '#prefix' => '<div class="description">',
    '#suffix' => '</div>',
    '#markup' => t('The facebook App ID can be set <a href="@link">here</a>.', array('@link' => url('admin/content/facebook'))),
  );
  // Enable or disable facebook comments for this node
  $form['onix_facebook']['onix_facebook_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable facebook comments'),
    '#default_value' => $defaults->enabled,
  );
  // Amount of comments
  $form['onix_facebook']['onix_facebook_amount'] = array(
    '#type' => 'select',
    '#title' => t('Amount of comments to display'),
    '#options' => array(1 => 1, 2 => 2, 3 => 3, 5 => 5, 7 => 7, 10 => 10, 15 => 15, 20 => 20, 30 => 30),
    '#default_value' => $defaults->amount,
  );
}

/**
 * Implements hook_node_insert().
 */
function onix_facebook_node_insert($node) {
  if (isset($node->onix_facebook_enabled) && !empty($node->onix_facebook_enabled)) {
    db_insert('onix_facebook')
      ->fields(array(
        'nid' => $node->nid,
        'enabled' => $node->onix_facebook_enabled,
        'amount' => $node->onix_facebook_amount,
    ))
    ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function onix_facebook_node_update($node) {
  if (isset($node->onix_facebook_enabled)) {
    db_merge('onix_facebook')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'enabled' => $node->onix_facebook_enabled,
        'amount' => $node->onix_facebook_amount,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function onix_facebook_node_delete($node) {
  db_delete('onix_facebook')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_view().
 */
function onix_facebook_node_view($node, $view_mode, $langcode) {
  if ($view_mode == "full") {
    $output = onix_facebook_display_markup();
    $node->content['onix_facebook_markup'] = array(
      '#markup' => $output,
      '#weight' => 0,
    );
  }
  // Check the view mode to display the comments or not
  $fc_viewmode = variable_get('onix_facebook_viewmode', 'full');
  if ($fc_viewmode != "both" && $view_mode != $fc_viewmode) return;
  // Check if facebook comments are enabled for this node
  $comments = db_select('onix_facebook', 'f')
    ->fields('f', array('enabled', 'amount'))
    ->condition('f.nid', $node->nid, '=')
    ->execute()
    ->fetchObject();
  if (!isset($comments->enabled) || !$comments->enabled) return;
  // Add the facebook App ID if it exists
  $width = variable_get('onix_facebook_width', 620);
  $output = onix_facebook_display_comments($width, $comments->amount);

  $node->content['onix_facebook_comments'] = array(
    '#markup' => $output,
    '#weight' => 1002,
  );
}

/**
 * Generate the output of a facebook commenting plugin.
 *
 * @param width
 *   The width of the plugin in pixels.
 * @param amount
 *   The amount of comments to display.
 */
function onix_facebook_display_comments($width, $amount, $url = NULL, $style = 'light') {
  // enabled comments all facebook
  $enabled_facebook_comments_all = variable_get('onix_facebook_enableall', FALSE);
  if (!$enabled_facebook_comments_all) return;
  //if (!user_access('enabled facebook comments')) return;
  // Generate the URL
  //global $base_url;
  //$base_url = "http://www.todayonline.com";
  $base_url = "http://www.todayonline.com/malaysiacup";
  //global $base_url;
  if(!$url){
    $url = $base_url . '/' . drupal_get_path_alias($_GET['q']);
    // Add user defined settings
  }else{
    $url = $base_url . '/' . $url;
  }

  $pathURL = $_GET['q'];
  $pathAlias = drupal_get_path_alias($pathURL);
  $pathAliasFirstArg = explode("/", $pathAlias);

  if ($pathAliasFirstArg[0]=='photos' || $pathAliasFirstArg[0]=='videos') {
    $width = 900;
  }

  //if ($pathAliasFirstArg[0]=='photos' || $pathAliasFirstArg[0]=='videos') {
  //  $style = 'dark';
  //}
  //else{
  //  $style = variable_get('onix_facebook_style', 'light');
  //}
  $output = '<div class="fb-comments" data-mobile="false" data-href="' . $url . '" data-num-posts="' . $amount . '" data-width="' . $width . '" data-colorscheme="' . $style . '"></div>';

  return $output;
}

/**
 * Generate the output of a facebook commenting plugin.
 *
 * @param width
 *   The width of the plugin in pixels.
 * @param amount
 *   The amount of comments to display.
 */
function onix_facebook_display_markup() {
  // Add the facebook App ID if it exists
  if ($appid = variable_get('onix_facebook_appid', '')) {
    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'fb:app_id',
        'content' => $appid,
      ),
    );
    drupal_add_html_head($element, 'facebook');
  }

  $output = '<div id="fb-root"></div><script>(function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) {return;}
    js = d.createElement(s); js.id = id;
    js.src = "http://connect.facebook.net/en_US/all.js#xfbml=1";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, "script", "facebook-jssdk"));</script>';


  return $output;
}

/**
 * Implements hook_page_alter().
 */
function onix_facebook_page_alter(&$page) {

  $page['header']['onixfacebook'] = array(
    '#type' => 'markup',
    '#markup' => onix_facebook_display_markup()
    );
}



/**
 * Implementation of hook_preprocess_page()
 *
 * Agrega JS de FB API
 */

function onix_facebook_preprocess(&$variables, $hook) {

  drupal_add_js(array('onix_facebook' => array('FBAppID' => variable_get('onix_facebook_appid', ''))), 'setting');
  drupal_add_js(drupal_get_path('module', 'onix_facebook') . '/js/onix_facebook.engine.js');
}
